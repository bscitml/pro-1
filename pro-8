# 8. Write a program to build and train an Artificial Neural Network (ANN) to solve the XOR
# problem. Use the Keras library to define the architecture, train the model, and display the
# predictions.

import numpy as np
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense

# Define the XOR dataset
# Inputs: [[0, 0], [0, 1], [1, 0], [1, 1]]
# Outputs: [[0], [1], [1], [0]]
inputs = np.array([[0, 0],
                   [0, 1],
                   [1, 0],
                   [1, 1]])

outputs = np.array([[0],
                    [1],
                    [1],
                    [0]])

# Define the ANN architecture
model = Sequential()
model.add(Dense(2, activation='relu', input_shape=(2,)))  # Hidden layer with 2 neurons
model.add(Dense(1, activation='sigmoid'))  # Output layer with 1 neuron

# Compile the model
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Train the model
model.fit(inputs, outputs, epochs=1000, verbose=0)  # Training for 1000 epochs

# Make predictions
predictions = model.predict(inputs)

# Display results
print("Predictions for XOR problem:")
for i in range(len(inputs)):
    print(f"Input: {inputs[i]} -> Predicted Output: {predictions[i][0]:.4f} (Threshold: {0.5}) -> Class: {1 if predictions[i][0] > 0.5 else 0}")
